Product Requirements Document (PRD)
Application: Teacher’s AssistantVersion: v1.2 (Simple Proof-of-Concept)Date: August 20, 2025  
1. Overview
Teacher’s Assistant is a minimal Streamlit web app for a single school. Admins create tests, upload question papers (PDF/image), manage students, and tweak AI prompts. Students upload answers (PDF/image) and see instant results. OpenAI’s gpt-4o-mini does OCR and grading. Data is stored in MongoDB; files in GridFS for 7 days. One dashboard for Admins, one for Students, with a simple login.
Purpose

Admins easily create tests and manage students.  
Students upload answers and get quick feedback.  
AI grades with customizable prompts for accuracy.  
Downloadable PDF results for both.

Value

Fast: Grade in <15 seconds.  
Easy: Simple dashboards for test creation and answer uploads.  
Clear: Detailed feedback with scores, remarks, and improvements.

2. Users

Admins: Create/edit/delete tests, manage students, upload answers, tweak AI prompts.  
Students: View assigned tests, upload answers, see results.

3. Core Features
REQ-001: Login

What: One login page for Admins and Students.  
How: Streamlit username/password; redirects to Admin or Student dashboard.  
Data: MongoDB Users (user_id, username, password, role: "admin" or "student").  
Must Have:  
Login in <500 ms.  
5 failed attempts lockout for 5 minutes.  
Secure password hashing.



REQ-002: Admin Dashboard

What: Single page to manage students, tests, and results.  
How: Tables for students, tests, submissions; buttons for actions.  
Must Have:  
Show students (name, class), tests (title, subject, date), submissions (student, test, score).  
Buttons: “Add Student,” “New Test,” “Settings,” “Upload Answer.”  
Search tests by date in <300 ms.



REQ-003: Student Dashboard

What: Single page for assigned tests and results.  
How: Tables for tests and submissions; upload button.  
Must Have:  
Show only assigned tests (title, subject, date) and submissions (test, score).  
Button to upload answers.  
Load in <300 ms.



REQ-004: Manage Students (Admin Only)

What: Admins add/edit/delete students.  
How: Form in Admin Dashboard.  
Data: MongoDB Students (student_id, name, class).  
Must Have:  
Add/edit/delete in <5 seconds.  
Required fields: name, class.



REQ-005: Create Tests (Admin Only)

What: Admins create/edit/delete tests with question file and optional rubric.  
How: Form for title, subject, date, PDF/image upload, rubric text.  
Data: MongoDB Tests (test_id, title, subject, date, rubric, file in GridFS).  
Must Have:  
Create/edit/delete in <5 seconds.  
No duplicate tests (same title/date).  
Files in GridFS for 7 days.



REQ-006: Upload Answers

What: Students upload answers for assigned tests; Admins upload for any student.  
How: Upload button in Test Detail (Student: own tests; Admin: select student).  
Data: MongoDB Submissions (submission_id, test_id, student_id, date, file in GridFS).  
Must Have:  
Upload in <5 seconds; no duplicates.  
Files in GridFS for 7 days.  
Auto-triggers grading.



REQ-007: AI Grading

What: OpenAI gpt-4o-mini for OCR and grading.  
How: Streams files to API; returns scores and feedback.  
Data: Submissions updated with total_score, per_question_scores, remarks, strengths, improvements, rubric_filled (if rubric).  
Must Have:  
Grade in <15 seconds.  
Results: total score, per-question scores, remarks, strengths, improvements, rubric table.  
Admins can edit scores.  
Retry errors 3 times; notify Admin if fails.



REQ-008: Prompt Tweaking (Admin Only)

What: Admins adjust OCR and grading prompts.  
How: Settings form in Admin Dashboard.  
Data: MongoDB Settings (prompt_type: "ocr" or "grading", prompt_text).  
Must Have:  
Save/reset prompts in <5 seconds.  
Defaults: OCR (“Extract all text”), Grading (“Grade accurately; list strengths/improvements”).



REQ-009: Results

What: View and download results as PDF.  
How: Submission Detail page with table; PDF download button.  
Data: PDF has student_name, test_title, date, total_score, per_question_scores, remarks, strengths, improvements, rubric_filled.  
Must Have:  
Instant results after grading.  
PDF generated in <5 seconds; named Student_Test_YYYY-MM-DD.pdf.



REQ-010: Storage

What: MongoDB for data; GridFS for files (7 days).  
Must Have:  
Queries <300 ms for 1,000 students.  
Files encrypted; deleted after 7 days.



4. App Flow
Admin

Login → Admin Dashboard.  
Add/edit/delete students or tests; tweak prompts.  
Upload answers for students; view/edit results; download PDF.

Student

Login → Student Dashboard.  
See assigned tests; upload answers.  
View results; download PDF.

5. Screens (Streamlit Multi-Page)



Screen
Role
Description



Login
Both
Username/password; redirects by role.


Admin Dashboard
Admin
Students, tests, submissions; buttons for actions, settings.


Student Dashboard
Student
Assigned tests, submissions; upload button.


Test Detail
Both
Test info; upload answer; view submissions.


Submission Detail
Both
Results table; edit score (Admin); PDF download.


Total Screens: 5
6. Requirements

Performance: UI/queries <300 ms; grading <15 seconds.  
Security: HTTPS; encrypted files; sanitized inputs.  
Usability: Simple Streamlit UI with Tailwind CSS; mobile-friendly.  
Reliability: 99.9% uptime; retry API errors 3 times.

7. Tech Stack

Frontend: Streamlit with Tailwind CSS.  
Backend: Streamlit; FastAPI optional for production.  
Database: MongoDB (Users, Students, Tests, Submissions, Settings); GridFS for files.  
AI: OpenAI gpt-4o-mini for OCR/grading.
